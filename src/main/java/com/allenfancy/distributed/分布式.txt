1.HTTP协议栈
	协议请求和响应的格式:
		HTTP(应用层)
		TCP(传输层)
		IP(网络层)
		网络接口层
		
		Request:
			encode:0表示GBK，1表示UTF-8
			commandLength:5
			command:Hello
		Response:
			encode:0表示GBK，1表示UTF-8
			responselength:6
			response：hello|
2.网站架构最核心的要素：
	性能
	可用性
	伸缩性
	扩展性
	安全性
	
	
3.web前端性能优化
	3.1浏览器访问优化
		1.减少http请求：
			HTTP协议是无状态的应用层协议。每个HTTP都需要启动独立的线程去处理。减少HTTP请求的数目可有效提高访问性能。
			减少HTTP的主要手段合并CSS、合并JavaScript、合并图片。
		2.使用浏览器缓存
			CSS、JavaScript、Logo、图标这些静态资源文件更新的频率都比较低，而这些文件几乎是每次HTTP请求都需要。如果将这些文件缓存在浏览器中，可以极好地改善性能。
			通过设置HTTP头中Cache-Control和Expires的属性。可设定浏览器缓存、缓存时间可以数天、甚至是几个月。
		3.启动压缩
			在浏览器端对文件解压缩，可有效较少通信传输的数据量。文件文件的压缩效率可大80%。
			HTML、CSS、JavaScript文件启动GZip压缩可达到较好的效果。
		4.CSS放在页面最上面、JavaScript放在页面最下面
			浏览器会在下载完全部CSS之后才对整个页面进行渲染，因此最好的做好事将CSS放在页面最上面。让浏览器尽快CSS。JavaScript则相反，浏览器在加载JavaScript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢。
		5.减少Cookie传输
			Cookie包含在每次请求和响应中，太大的Cookie会严重影响数据传输，因此哪些数据需要写入Cookie需要慎重考虑，尽量较少Cookie中传输的数据量。另外一方面，对于某些静态资源的访问，如CSS
			Script等。发送Cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送Cookie，减少Cookie传输的次数。
		6.CDN加速
			CDN(Content Distribute Network,内容发布网络)的本质仍然是一个缓存，而且将数据缓存在离用户最近的地方，使用最快速度获取数据。
			CDN能够缓存的一般是静态资源，如图片、文件、CSS、Script脚本、静态网页等。但是这些文件访问频率很高，将其缓存在CDN可极大改善网页的打开速度。
		7.反向代理
			传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而方向代理服务器位于网站机房一侧，代理网站web服务器接收HTTP请求。
			反向代理也可以实现负载均衡的功能，而通过负载均衡构建的应用集群可以提高系统总体处理能力，进而改善网站高并发情况下的性能。
	3.2应用服务器性能优化
		应用服务器就是处理网站业务的服务器，网站的业务代码都部署在这里，是网站开发最复杂，变化最多的地方，优化手段：缓存、集群、异步等。
		1、分布式缓存(网站性能优化第一定律：优先考虑使用缓存优化性能)
			1.缓存的基本原理
				缓存指将数据存储在相对较高访问速度的存储介质中，以供系统处理。一方面缓存访问速度快，可以较少数据访问的时间，另一方面如果缓存的数据是经过计算处理得到的，那么被缓存的数据无需重复计算。缓存还起到减少计算时间的作用。
				缓存的本质是一个内存Hash表，网站应用中，数据缓存以key-value的形式存在Hash表中。
		2、合理使用缓存
			1.频繁修改的数据
				频繁修改的数据不应该写入缓存，数据的读写比在2:1以上写入一次缓存才算合理，数据更新前至少读取俩次，缓存才有意义。
			2.没有热点的访问
				缓存使用内存作为存储，内存资源宝贵而有限，不卡可能将所有数据都缓存起来，只能将最新访问的数据缓存起来，而将历史数据清理出缓存。
			3.数据不一致与脏读
				一般会对缓存的数据设置失效时间，一旦超过失效时间，就要从数据库中重新加载。
		3、分布式缓存架构
			分布式缓存指缓存部署存在多个服务器组成的集群中，以集群方式提供缓存服务，其架构方式俩种，一种以JBoss Cache为代表的需要更新同步的分布式缓存，一种是以Memcached为代表的不互相通信的分布式缓存。
			JBoss Cache的分布式缓存存在集群中所有服务器中保存相同的缓存数据。
		4、Memcached
			
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			
	
	
	
	
			