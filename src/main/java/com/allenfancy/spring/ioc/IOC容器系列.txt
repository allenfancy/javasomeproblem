Spring各个模块的职责：
1. spring.jar 
	包含有完整发布模块的单个jar 包。这个在~3.03之后不再提供！想要该包的同学，把dist目录下的jar全部解压开，在打包成spring.jar即可。


2. org.springframework.aop 
	包含在应用中使用Spring的AOP特性时所需的类。


3. org.springframework.asm  
	Spring独立的asm程序, Spring2.5.6的时候需要asmJar 包，3.0开始提供他自己独立的asmJar。


4. org.springframework.aspects 
	提供对AspectJ的支持，以便可以方便的将面向方面的功能集成进IDE中，比如Eclipse AJDT。


5. org.springframework.beans
	所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Dependency Injection（IoC/DI）操作相关的所有类。


6. org.springframework.context.support
	包含支持缓存Cache（ehcache）、JCA、JMX、 邮件服务（Java Mail、COS Mail）、任务计划Scheduling（Timer、Quartz）方面的类。


7. org.springframework.context
	为Spring核心提供了大量扩展。可以找到使用Spring ApplicationContext特性时所需的全部类，JDNI所需的全部类，UI方面的用来与模板（Templating）引擎如 Velocity、FreeMarker、JasperReports集成的类，以及校验Validation方面的相关类。


8. org.springframework.core 
	包含Spring框架基本的核心工具类，Spring其它组件要都要使用到这个包里的类，是其它组件的基本核心。


9. org.springframework.expression  
	Spring表达式语言。


10. org.springframework.instrument.tomcat 
	Spring3.0对Tomcat的连接池的集成。


11. org.springframework.instrument 
	Spring3.0对服务器的代理接口。


12. org.springframework.jdbc 
	包含对Spring对JDBC数据访问进行封装的所有类。

 

13. org.springframework.jms 
	提供了对JMS 1.0.2/1.1的支持类。


14. org.springframework.orm 
	包含Spring对DAO特性集进行了扩展，使其支持 iBATIS、JDO、OJB、TopLink，  因为hibernate已经独立成包了，现在不包含在这个包里了。这个jar文件里大部分的类都要依赖spring-dao.jar里的类，用这个包时你需要同时包含spring-dao.jar包。


15. org.springframework.oxm  
	Spring 对Object/XMl的映射支持,可以让Java与XML之间来回切换。


16. org.springframework.test  
	对Junit等测试框架的简单封装。


17. org.springframework.transaction
	为JDBC、Hibernate、JDO、JPA等提供的一致的声明式和编程式事务管理。


18. org.springframework.web.portlet  
	SpringMVC的增强。


19. org.springframework.web.servlet  
	对J2EE6.0 的Servlet3.0的支持。


20. org.springframework.web.struts 
	Struts框架支持，可以更方便更容易的集成Struts框架。


21. org.springframework.web 
包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入WebApplicationContext特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类。



IOC容器系列：
 俩个主要的容器:BeanFactory 和 ApplicationContext
 
 接口设计主线：
  BeanFactory ---> HierarchicalBeanFactory ---> ConfigurableBeanFactory.主要的BeanFactory设计路径。
 第二条接口设计主线：
  BeanFatory ----> ListableBeanFactory ---> ApplicaitonContext --->WebApplicationContext or ConfigurableApplicationContex
  接口主线中：ListableBeanFactor和HierarchicalBeanFactory俩个接口，链接BeanFactory接口定义和ApplicationContext应用上下文的接口定义。
 主要接口关系：而具体的IoC容器都是在这个接口体系下实现的：DefaultistableBeanFactory,这个基本IoC容器的实现就是实现了ConfigurableBeanfactory，从而实现一个简单的IoC容器的实现。像其他的IoC容器
 比如XmlBeanFactory，都是在DefaultListableBeanFactory的基础上做扩展。
 
 ApplicationContext的设计中，一方面，可以看到它继承MessageSource，ResourceLoader，ApplicationEventPublisher这些接口,BeanFactory为ApplicationContext赋予了更高级的IoC容器特性。
 为了在Web环境中使用它，还设计了WebApplicationContext接口，而这个接口是通过继承ThremeSource接口来扩展功能。
 
 在使用IoC容器时，需要几个步骤：
 	1.创建IoC配置文件的抽象资源，这个抽象资源包含了BeanDefinition的定义信息
 	2.创建一个BeanFactory，这里使用DefaultListableBeanFactory。
 	3.创建一个载入BeanDefinition的读取器，这里使用XMLBeanDefinitionReader来载入XML文件形式的BeanDefinition，通过一个回调配置给BeanFactory
 	4.从定义好的资源位置读入配置信息，具体的解析过程由XMLBeanDefinitionReader来完成。完成整个载入和注册Bean定义之后，需要的IoC容器就建立起来。这时候IoC容器可以直接使用了。
 	
ApplicationContext的特点：
	ApplicationContext是一个高级形态意义的IoC容器，可以看到ApplicationContext在BeanFactory的基础上添加饿附加功能。
IoC容器的初始化
	IoC容器的初始化包括BeanDefinition的Resource定位，载入和注册这三个基本的过程。
	Spring在实现中是这三个过程分开并使用不同的模块来完成的，这样可以让用户更加灵活地对这三个过程进行剪裁和扩展，定义出最适合自己的IoC容器的初始化过程。
	BeanDefinition的资源定位由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDefinition的使用提供了统一接口。
	第二个关键的部分是BeanDefinition的载入，该载入过程把用户定义好的Bean表是成IoC容器内部的数据结果，而这个容器内部的数据结构就是BeanDefinition，下面可以看到这个数据结构的相信定义。
	总结：这个BeanDefinition实际上及时POJO对象在IoC容器中的抽象。
	第三个部分是向IoC容器注册这些BeanDefinition的过程
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  