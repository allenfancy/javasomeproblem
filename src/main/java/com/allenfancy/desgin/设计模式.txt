1.适配器(adapter)模式
	业务场景：使用不同接口的类所提供的服务为客户端提供它所期望的接口，有动机地修改一个正常运行的系统的接口，这时应该考虑适配器模式
	作为俩个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了俩个独立接口的功能
	
	适配器模式使我们可以重用一下现有的类，以满足客户端的需要。当客户端通过接口表达其需求时，通常可以创建一个现实了该接口的新类，同时使该类
	继承自现有类。这种方式即类的适配器，它能够将客户端的调用转换为对现有类方法的调用
	
2.外观(Facade)模式
	简化工具包的另一个途径是使用外观(facade)模式。只需要少量的代码，就能够提供典型的，无修饰用法的类库中的。一个外观就是一个类。它包含的功能
	介于工具包与完整的应用程序之间。
	主要解决：降低访问复杂系统的内部子类系统时的复杂度，简化客户端和接口的交互
	何时使用：1.客户端不需要知道系统内部的复杂联系，整个系统只要提供了一个"接待员"即可。2.定义系统的入口
	方式实例：1.去医院看病，可能需要去挂号，门诊，划价、取药，让患者或者患者家属感觉很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。2.Java的三层开发模式
	优点：1.减少系统相互依赖。2.提高灵活性。3.提高了安全性
	缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。
	
3.组合(Composite)模式
	组合模式，是用于把一组相似对象当做一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的属性结构
	这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式
	组要解决：树形结构的问题中，模糊了简单元素和复杂元素的概念，客户端可以向处理简单元素一样来处理复杂元素，从而使得客户端与复杂元素的内部结构解耦。

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	