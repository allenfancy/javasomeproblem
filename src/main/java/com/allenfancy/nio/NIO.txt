Java NIO：
	Channels and Buffers(通道和缓冲区)：标准的IO基于字节流和字符流进行操作。而NIO是基于通道Channel 和 缓冲区(Buffer)进行操作
	数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。
	Asynchronous IO(异步IO)：Java NIO可以让你异步的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。
	当数据被写入到缓冲区时，线程可以继续处理它。从缓冲区写入通道也类似。
	Selectors(选择器):Java NIO引入选择器的概念，选择器用于监听多个通道的事件(比如：链接打开，数据到达)。因此，单个的线程可以监听多个数据通道。
	特性：
		为所有的原始类型提供(Buffer)缓存支持；
		使用Java.nio.charset.Charset作为字符集编码解码解决方案
		增加通道(Channel)对象，作为新的原始I/O抽象
		支持锁和内存映象文件的文件访问接口
		提供了基于Selector的异步网络I/O。
		
	NIO是基于块(Block)的，它以块为基本单位处理数据。在NIO中，最为重要的俩个组件是缓冲Buffer和通道Channel。缓冲室一块连续的内存块，是NIO读写数据的中转地。
	通道表示缓冲数据的源头或目的地，它用于向缓冲读取或者写入数据，是访问缓冲的接口。