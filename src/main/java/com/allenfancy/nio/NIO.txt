Java NIO：
	Channels and Buffers(通道和缓冲区)：标准的IO基于字节流和字符流进行操作。而NIO是基于通道Channel 和 缓冲区(Buffer)进行操作
	数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。
	Asynchronous IO(异步IO)：Java NIO可以让你异步的使用IO，例如：当线程从通道读取数据到缓冲区时，线程还是可以进行其他事情。
	当数据被写入到缓冲区时，线程可以继续处理它。从缓冲区写入通道也类似。
	Selectors(选择器):Java NIO引入选择器的概念，选择器用于监听多个通道的事件(比如：链接打开，数据到达)。因此，单个的线程可以监听多个数据通道。
	特性：
		为所有的原始类型提供(Buffer)缓存支持；
		使用Java.nio.charset.Charset作为字符集编码解码解决方案
		增加通道(Channel)对象，作为新的原始I/O抽象
		支持锁和内存映象文件的文件访问接口
		提供了基于Selector的异步网络I/O。
		
	NIO是基于块(Block)的，它以块为基本单位处理数据。在NIO中，最为重要的俩个组件是缓冲Buffer和通道Channel。缓冲室一块连续的内存块，是NIO读写数据的中转地。
	通道表示缓冲数据的源头或目的地，它用于向缓冲读取或者写入数据，是访问缓冲的接口。
	
	
	
	
	
1.Channel:
	.即可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的
	.通道中得数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入
	.通道可以异步地读写
  Channel的实现：
  	FileChannel从文件中读写数据
  	DatagramChannel通过UDP读写网络的数据
  	SocketChannel 能通过TCP读写网络中得数据
  	ServerSocketChannel	可以监听新进来的TCP链接，像web服务器那样。对每一个新进来的链接都会创建一个SocketChannel
  	
2.Buffer读写数据的四个步奏
	1.写入数据到Buffer
	2.调用flip()方法
	3.从buffer中读取数据
	4.调用clear()方法或者compact()方法
  当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer将Buffer从模式切换到读模式。在读模式下，可以读取之前写入到Buffer的所有数据
  一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有俩种方式能清空缓冲区：
  	调用clear()或compact()方法。clear()方法会清空整个缓冲区。compact()方法只会清除已经读取过的数据。任何未读取的数据都会被移动到缓冲区的起始处。新写入的数据将放到缓冲区未读数据的后面。
  	
  Buffer的capacity position,limit
  	缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该内存。
  	为了理解Buffer的工作原理，需要熟悉三个属性：
  		capacity position limit
  	position 和 limit的含义取决Buffer处在读模式还是写模式。不管Buffer处在什么模式，capacity的含义总是一样的。

3.Scatter / Gather
	scatter/gather 中读取或者写入到Channel的操作
	分散(scatter):从channel中读取是指在读操作时将读取的数据写入多个buffer中。因此，Channel将从Channel中读取的数据"分散(scatter)"到多个Buffer中。
	聚集(gather):写入Channel是指在写操作时将多个buffer的数据写入同一个Channel，因此，Channel将多个Buffer的数据gather后，发送到channel
	
	注意buffer首先被插入到数组，然后再将数组作为channel.read() 的输入参数。read()方法按照buffer在数组中的顺序将从channel中读取的数据写入到buffer，当一个buffer被写满后，channel紧接着向另一个buffer中写。

	Scattering Reads在移动下一个buffer前，必须填满当前的buffer，这也意味着它不适用于动态消息(译者注：消息大小不固定)。换句话说，如果存在消息头和消息体，消息头必须完成填充（例如 128byte），Scattering Reads才能正常工作	
	
	buffers数组是write()方法的入参，write()方法会按照buffer在数组中的顺序，将数据写入到channel，注意只有position和limit之间的数据才会被写入。
	因此，如果一个buffer的容量为128byte，但是仅仅包含58byte的数据，那么这58byte的数据将被写入到channel中。因此与Scattering Reads相反，Gathering Writes能较好的处理动态消息。

4.通道之间传输数据
	在Java NIO中，如果俩个通道中有一个是FileChannel，那你可以直接将数据从一个Channel传输到另一个channel。
	
5.Selector 
	Selector(选择器)是Java NIO中能够检测一到多个NIO通道，并能够知晓通道是否诸如读写事件做好准备的组件。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接。
	仅用单个线程来处理多个Channels的好处是，只需要更少得线程来处理通道。实际上，可以只用一个线程处理所有的通道。对于操作系统来说，线程之间上下文切换的开销很大，而且每个线程都要占用系统的一些资源。因此，使用的线程越少越好。
	Selector的创建：
		Selector selector = Selector.open();
	Channel和Selector配合使用，必须将Channel注册到Selector上，通过SelectableChannel.register()方法来实现的。
	channel.configureBlocking(false);
	SelectionKey key = channel.register(selector,Selectionkey.OP_READ);
	监听四种不同类型的事件：
		1.Connect
		2.Accept
		3.Read
		4.Write
	通道出发了一个事件的意思是该时间已经就绪。某个channel成功连接到另一个服务器称为"连接就绪"。
	一个server socket channel准备好接收新进入的链接称为"接收就绪"。一个有数据可读得通道可以说是"读就绪"。等待写数据的通道可以说是"写就绪"。
	SelectionKey.OP_CONNECT
	SelectionKey.OP_ACCEPT
	SelectionKey.OP_READ
	SelectionKey.OP_WRITE

6.SocketChannel:
	1.打开一个SocketChannel并链接到互联网上的某台服务器。
	2.一个新链接到达ServerSocketChannel时，会创建一个SocketChannel。
	
	
	
	
	
	